import pytest
import allure
from pages.chat_page import ChatPage
from playwright.sync_api import expect


@allure.feature("–ß–∞—Ç")
@pytest.mark.critical
class TestChat:
    def test_initial_ai_greeting(self, chat_page: ChatPage):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ AI"""
        greeting = chat_page.get_greeting_text()
        
        assert "Hello, Yury üëã" in greeting['header']
        assert "Please select a question" in greeting['first_paragraph']
        assert "already existing chat from history" in greeting['second_paragraph']
        assert greeting['add_button_visible'] is True


    @pytest.mark.parametrize("test_message", [
        "Hello AI",
        "What can you do?",
        "Explain like I'm five"
    ])
    def test_chat_flow(self, chat_page: ChatPage, test_message):
        """–¢–µ—Å—Ç –æ–±—â–µ–Ω–∏—è —Å ChatGPT —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–µ–π —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_page.send_message_and_wait_for_response(test_message)
        
        last_response = chat_page.get_last_ai_message()
        assert len(last_response) > 0, "–û—Ç–≤–µ—Ç AI –ø—É—Å—Ç–æ–π"
        assert len(last_response) > 100, "–û—Ç–≤–µ—Ç AI —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
        
        chat_page.make_screenshot()


    def test_message_sequence(self, chat_page: ChatPage):
        """–¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        messages = ["Hi", "How are you?", "What's new?"]
        responses = []
        
        for msg in messages:
            chat_page.send_message_and_wait_for_response(msg)
            responses.append(chat_page.get_last_ai_message())
        
        assert len(responses) == len(set(responses)), "–ü–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã AI"


    def test_message_history(self, chat_page: ChatPage):
        """–¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        messages = ["First message", "Second message"]
        for msg in messages:
            chat_page.send_message_and_wait_for_response(msg)
        
        assert chat_page.get_last_user_message() == messages[-1]
        assert chat_page.get_last_ai_message() != ""


    def test_regenerate_response(self, chat_page: ChatPage):
        """–¢–µ—Å—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        chat_page.send_message_and_wait_for_response("Test regenerate")
        first_response = chat_page.get_last_ai_message()
        
        chat_page.regenerate_response()
        chat_page.wait_for_ai_response()
        
        second_response = chat_page.get_last_ai_message()
        assert first_response != second_response
